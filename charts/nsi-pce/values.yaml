# Default values for nsi-pce.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  registrey: docker.io
  repository: hnstrmprt/nsi-pce
  pullPolicy: IfNotPresent
  # tag overrides the image tag whose default is the chart appVersion
  #tag: "2.0.4"
  home: "/nsi-pce"

startupProbe:
  enabled: false
  scheme: "HTTP"
  path: "/paths"
  failureThreshold: 30
  periodSeconds: 10
  timeoutSeconds: 5

livenessProbe:
  enabled: false
  scheme: "HTTP"
  path: "/paths"
  failureThreshold: 5
  periodSeconds: 6
  timeoutSeconds: 5

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  name: nsi-pce
  port: 80
  containerPort: 8080
# configure either ClusterIP or LoadBalancer + ipAddress
  type: ClusterIP
#  type: LoadBalancer
#  ipAddress: 1.2.3.4
#  annotations:
#    service.beta.kubernetes.io/azure-load-balancer-internal: "true"

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
        serviceName: chart-example.local
        servicePort: 80
  tls:
    - secretName: chart-example-tls
      hosts:
        - chart-example.local

# if you do not want to use ingress annotations to generate the Certificate manifest
certificate:
  enabled: false
  name: chart-example-tls
  dnsName: example.domain.toplevel
  issuerRef:
    name: letsencrypt
  secretName: chart-example-tls
  privateKey:
    rotationPolicy: Always
  keystores:
    jks:
      create: false
      password: "secret"
    pkcs12:
      create: false
      password: "secret"

resources:
  requests:
    memory: 5Gi
    cpu: 100m
  limits:
    memory: 10Gi
    cpu: 1000m

nodeSelector: {}

tolerations: []

affinity: {}

config:
  # enable SSL, a nsi-pce-keystore.jks and nsi-pce-truststore.jks must be provided
  enableSSL: true
  keyStorePath: /nsi-pce/config/nsi-pce-keystore.jks
  trustStorePath: /nsi-pce/config/nsi-pce-truststore.jks
  # DDS portal URL used by wait-for-dds init container
  ddsPortalUrl: http://development-nsi-dds.development.svc.cluster.local:80/dds/portal
  #
  # nsi-pce needs the following four configuration files:
  # - topology-dds.xml
  # - logging.properties
  # - log4j.xml
  # - beans.xml
  # - http.json
  # - jetty.xml
  # - log4j-viewer.xml
  #
  # When config.configMapName is defined it must point to an existing configmap, managed outside of Helm,
  # that contains all necessary configuration files. Otherwise, Helm will create a configmap with files from
  # a folder pointed to by config.filesGlob, or the combination of config.inlineData and config.inlineBinaryData
  # is used. Note that filesGlob takes precedence over inline data.
  #
  # When config.keystore.secretName is defined it must point to an existing secret, managed outside of Helm,
  # the file pointed to by config.keystore.key will be mapped to nsi-pce-keystore.jks. In this case the configmap
  # does not need to contain a keystore. To use a truststore from a secret use config.truststore.
  #
  mountPath: "/nsi-pce/config"
  #configMapName: my-configmap-with-config
  #configFilesGlob: "config/*"
  inlineData: |-
    topology-dds.xml: |-
      <?xml version="1.0" encoding="UTF-8"?>
      <top:topology xmlns:top="http://schemas.es.net/nsi/2013/08/pce/topology/configuration">
        <baseURL>http://localhost:8080/topology</baseURL>
        <ddsURL>http://development-nsi-dds.development.svc.cluster.local:80/dds</ddsURL>
        <auditInterval>3600</auditInterval>
        <defaultServiceType>http://services.ogf.org/nsi/2013/12/descriptions/EVTS.A-GOLE</defaultServiceType>
      </top:topology>
    logging.properties: |-
      java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
      handlers=java.util.logging.ConsoleHandler
      java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
      java.util.logging.SimpleFormatter.format=%1$tF %1$tT.%1$tL %4$-5s [%2$s] %5$s%n
      org.glassfish.jersey.config.feature.Trace=true
      org.glassfish.grizzly.config.feature.Trace=true
    log4j.xml: |-
      <?xml version="1.0" encoding="UTF-8" ?>
      <!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
      <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
        <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
          <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %-5p [%t] (%C:%L) - %m%n" />
          </layout>
          <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="DEBUG" />
            <param name="levelMax" value="ERROR" />
          </filter>
        </appender>
        <appender name="ERR_FILE" class="org.apache.log4j.RollingFileAppender">
          <param name="MaxFileSize" value="100MB" />
          <param name="MaxBackupIndex" value="20"/>
          <param name="encoding" value="UTF-8" />
          <param name="File" value="${basedir}/var/log/nsi-pce.err.log" />
          <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %-5p [%t] (%C:%L) - %m%n" />
          </layout>
          <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="WARN" />
            <param name="levelMax" value="ERROR" />
          </filter>
        </appender>
        <appender name="INFO_FILE" class="org.apache.log4j.RollingFileAppender">
          <param name="MaxFileSize" value="100MB" />
          <param name="MaxBackupIndex" value="20"/>
          <param name="encoding" value="UTF-8" />
          <param name="File" value="${basedir}/var/log/nsi-pce.info.log" />
          <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %-5p [%t] (%C:%L) - %m%n" />
          </layout>
          <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="INFO" />
            <param name="levelMax" value="ERROR" />
          </filter>
        </appender>
        <appender name="DEBUG_FILE" class="org.apache.log4j.RollingFileAppender">
          <param name="MaxFileSize" value="100MB" />
          <param name="MaxBackupIndex" value="20"/>
          <param name="encoding" value="UTF-8" />
          <param name="File" value="${basedir}/var/log/nsi-pce.debug.log" />
          <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %-5p [%t] (%C:%L) - %m%n" />
          </layout>
          <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="DEBUG" />
            <param name="levelMax" value="ERROR" />
          </filter>
        </appender>
        <logger name="org.springframework">
          <level value="WARN" />
        </logger>                
        <logger name="org.eclipse">
          <level value="DEBUG" />
        </logger>
        <logger name="org.apache">
         <level value="DEBUG" />
        </logger>
        <logger name="org.glassfish.jersey">
          <level value="DEBUG" />
        </logger>
        <logger name="org.hibernate">
          <level value="WARN" />
        </logger>
        <logger name="net.es.nsi.pce">
          <level value="DEBUG" />
        </logger>
        <root>
          <level value="DEBUG" />
          <appender-ref ref="CONSOLE" />
          <!--
          <appender-ref ref="INFO_FILE" />
          <appender-ref ref="ERR_FILE" />
          <appender-ref ref="DEBUG_FILE" />
          -->
        </root>
      </log4j:configuration>
    beans.xml: |-
      <?xml version="1.0" encoding="UTF-8"?>
      <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
          <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />
          <bean id="springApplicationContext" class="net.es.nsi.pce.spring.SpringApplicationContext" scope="singleton" />
          <bean id="jsonProxy" class="net.es.nsi.pce.gson.JsonProxy" scope="singleton" />
          <bean id="httpConfigProvider" class="net.es.nsi.pce.config.http.JsonHttpConfigProvider" init-method="loadConfig" scope="singleton">
              <property name="filename" value="#{ systemProperties['configPath'] }http.json"/>
          </bean>
          <bean id="pceServer" class="net.es.nsi.pce.server.PCEServer" scope="singleton" depends-on="jsonProxy">
              <constructor-arg index="0" ref="httpConfigProvider"/>
          </bean>
          <bean id="pceScheduler" class="net.es.nsi.pce.sched.PCEScheduler" init-method="init" scope="singleton" />
          <bean id="restClient" class="net.es.nsi.pce.jersey.RestClient" scope="singleton" />
          <bean id="topologyConfiguration" class="net.es.nsi.pce.topology.dao.TopologyConfiguration" init-method="load" scope="singleton">
              <property name="filename" value="#{ systemProperties['topologyConfigFile'] }"/>
          </bean>
          <bean id="topologyProvider" class="net.es.nsi.pce.topology.provider.DdsTopologyProvider" init-method="init" scope="singleton">
              <constructor-arg index="0" ref="topologyConfiguration"/>
          </bean>
          <bean id="documentReader" class="net.es.nsi.pce.topology.provider.DdsDocumentReader" scope="prototype" />
          <bean id="reachabilityProcessor" class="net.es.nsi.pce.pf.api.gof3.ReachabilityProcessor" scope="singleton">
              <constructor-arg index="0" ref="topologyProvider"/>
          </bean>
          <bean id="dijkstraPCE" class="net.es.nsi.pce.pf.DijkstraPCE" scope="prototype" />
          <bean id="underspecifiedPCE" class="net.es.nsi.pce.pf.UnderspecifiedPCE" scope="prototype" />
          <bean id="reachabilityPCE" class="net.es.nsi.pce.pf.ReachabilityPCE" scope="prototype" />
          <bean id="authPCE" class="net.es.nsi.pce.pf.AuthPCE" scope="prototype" />
          <bean id="policyPCE" class="net.es.nsi.pce.pf.PolicyPCE" scope="prototype" />
          <bean id="resolvePCE" class="net.es.nsi.pce.pf.ResolvePCE" scope="prototype" />
          <bean id="chainPCE" class="net.es.nsi.pce.pf.SequentialPCE">
              <property name="moduleList">
                  <list>
                      <ref bean="reachabilityPCE" />
                  </list>
              </property>
          </bean>
          <bean id="treePCE" class="net.es.nsi.pce.pf.SequentialPCE">
              <property name="moduleList">
                  <list>
                      <ref bean="authPCE" />
                      <ref bean="policyPCE" />
                      <ref bean="dijkstraPCE" />
                      <ref bean="resolvePCE" />
                  </list>
              </property>
          </bean>
          <bean id="sequentialPCE" class="net.es.nsi.pce.pf.SequentialPCE">
              <property name="moduleList">
                  <list>
                      <ref bean="authPCE" />
                      <ref bean="policyPCE" />
                      <ref bean="dijkstraPCE" />
                      <ref bean="underspecifiedPCE" />
                      <ref bean="resolvePCE" />
                  </list>
              </property>
          </bean>
          <bean id="pathfinderCore" class="net.es.nsi.pce.pf.PathfinderCore" scope="prototype">
              <constructor-arg index="0" ref="topologyProvider"/>
              <constructor-arg index="1" ref="chainPCE"/>
              <constructor-arg index="2" ref="treePCE"/>
              <constructor-arg index="3" ref="sequentialPCE"/>
          </bean>
      </beans>
    http.json: |-
      {
          "pce": {
              "url": "http://localhost:8400/",
              "packageName": "net.es.nsi.pce",
              "staticPath": "config/www/",
              "wwwPath": "/www"
          }
      }
    jetty.xml: |-
      <beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:http="http://cxf.apache.org/transports/http/configuration"
             xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
             xmlns:jaxrs="http://cxf.apache.org/jaxrs"
             xmlns:sec="http://cxf.apache.org/configuration/security"
             xsi:schemaLocation="
              http://www.springframework.org/schema/beans                 http://www.springframework.org/schema/beans/spring-beans.xsd
              http://cxf.apache.org/transports/http/configuration         http://cxf.apache.org/schemas/configuration/http-conf.xsd
              http://cxf.apache.org/transports/http-jetty/configuration   http://cxf.apache.org/schemas/configuration/http-jetty.xsd
              http://cxf.apache.org/configuration/security                http://cxf.apache.org/schemas/configuration/security.xsd
              http://cxf.apache.org/jaxrs                                 http://cxf.apache.org/schemas/jaxrs.xsd">
      </beans>
    log4j-viewer.xml: |-
      <?xml version="1.0" encoding="UTF-8" ?>
      <!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
      <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
        <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
          <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %-5p [%t] (%C:%L) - %m%n" />
          </layout>
          <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="DEBUG" />
            <param name="levelMax" value="ERROR" />
          </filter>
        </appender>
        <logger name="org.springframework">
          <level value="WARN" />
        </logger>
        <logger name="org.eclipse">
          <level value="DEBUG" />
        </logger>
        <logger name="org.apache">
          <level value="DEBUG" />
        </logger>
        <logger name="org.glassfish.jersey">
          <level value="DEBUG" />
        </logger>
        <logger name="org.hibernate">
          <level value="WARN" />
        </logger>
        <logger name="net.es.nsi.pce">
          <level value="DEBUG" />
        </logger>
        <root>
          <level value="DEBUG" />
          <appender-ref ref="CONSOLE" />
        </root>
      </log4j:configuration>
  # When using inline key and trust stores, please replace the Lorem Ipsum below with actual stores.
  inlineBinaryData: |-
    nsi-pce-keystore.jks: |-
      TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2Vk
      IGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlx
      dWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFt
      Y28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0
      ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1
      bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBj
      dXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1v
      bGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLgo=
    nsi-pce-truststore.jks: |-
      TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2Vk
      IGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlx
      dWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFt
      Y28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0
      ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1
      bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBj
      dXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1v
      bGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLgo=
  # Use keystore and truststore below to override the nsi-pce-keystore.jks and/or nsi-pce-truststore.jks
  # from the configmap above. For example to use a keystore generated by certmanager.
  keystore:
    #secretName: my-nsi-pce-keystore
    #key: keystore.jks
  truststore:
    #secretName: my-nsi-pce-truststore
    #key: truststore.jks
  # Create /config/trust/nsi-pce-truststore.jks from ca.crt from caSecretName mounted under /ca
  caSecretName: ""
