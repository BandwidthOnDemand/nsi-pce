apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "nsi-pce.fullname" . }}
  labels:
    {{- include "nsi-pce.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Chart.Name }}
  selector:
    matchLabels:
      {{- include "nsi-pce.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nsi-pce.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nsi-pce.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.config.caSecretName }}
        - name: ca-to-truststore
          securityContext:
            runAsUser: 0
          image: debian:trixie-slim
          command:
            - sh
            - -c
            - |
              cd /truststore
              cp /ca/ca.crt .
              apt-get update
              apt-get install -y --no-install-recommends openjdk-21-jdk-headless
              awk '/-----BEGIN CERTIFICATE-----/ {out="cert" ++i ".pem"}; out {print >> out} /-----END CERTIFICATE-----/ {out=""}' ca.crt
              for cert in cert*.pem; do
                  cn=$(openssl x509 -in ${cert} -noout -subject | sed -n 's/^subject=//p')
                  echo "${cn}"
                  keytool -trustcacerts -storepass secret -importcert -alias "${cn}" -file ${cert} -keystore nsi-pce-truststore.jks -storetype jks -noprompt
              done
              rm cert*.pem
          volumeMounts:
            - name: truststore
              mountPath: /truststore
            - name: ca
              mountPath: /ca
        {{- end }}
        - name: wait-for-dds
          image: curlimages/curl:latest
          command: ["sh", "-c",
            {{ printf "until [ $(curl -sw '%%{http_code}' %s -o /dev/null) -eq 200 ]; do echo `date` sleeping 2 seconds ...; sleep 2; done" .Values.config.ddsPortalUrl | quote }}
          ]
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["java"]
          args:
            - "-Xmx10000m"
            - "-Djava.net.preferIPv4Stack=true"
            - "-Dcom.sun.xml.bind.v2.runtime.JAXBContextImpl.fastBoot=true"
            {{- if .Values.config.enableSSL }}
            - "-Djavax.net.ssl.trustStoreType=jks"
            - "-Djavax.net.ssl.keyStoreType=jks"
            - "-Djavax.net.ssl.trustStorePassword=secret"
            - "-Djavax.net.ssl.keyStorePassword=secret"
            - {{ printf "-Djavax.net.ssl.trustStore=%s" .Values.config.trustStorePath | quote }}
            - {{ printf "-Djavax.net.ssl.keyStore=%s" .Values.config.keyStorePath | quote }}
            {{- end }}
            - {{ printf "-Djava.util.logging.config.file=%s/logging.properties" .Values.config.mountPath | quote }}
            - {{ printf "-Dlog4j.configuration=%s/log4j.xml" .Values.config.mountPath | quote }}
            - {{ printf "-Dapp.home=%s" .Values.image.home | quote }}
            - {{ printf "-Dbasedir=%s" .Values.image.home | quote }}
            - "-jar"
            - {{ printf "%s/pce.jar" .Values.image.home | quote }}
            - {{ printf "-topologyConfigFile=%s/topology-dds.xml" .Values.config.mountPath | quote }}
          volumeMounts:
            - name: config
              mountPath: {{ .Values.config.mountPath }}
              readOnly: true
          {{- if (((.Values.config).keystore).secretName) }}
            - name: keystore
              mountPath: "{{ .Values.config.mountPath }}/key"
              readOnly: true
          {{- end }}
          {{- if (((.Values.config).truststore).secretName) }}
            - name: truststore
              mountPath: "{{ .Values.config.mountPath }}/trust"
              readOnly: true
          {{- end }}
          {{- if .Values.config.caSecretName }}
            - name: truststore
              mountPath: /truststore
          {{- end }}
          ports:
            - name: internal
              containerPort: {{ .Values.service.containerPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              scheme: {{ .Values.livenessProbe.scheme }}
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.service.containerPort }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              scheme: {{ .Values.startupProbe.scheme }}
              path: {{ .Values.startupProbe.path }}
              port: {{ .Values.service.containerPort }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ .Release.Name }}-config
            items:
              - key: "topology-dds.xml"
                path: "topology-dds.xml"
              - key: "logging.properties"
                path: "logging.properties"
              - key: "log4j.xml"
                path: "log4j.xml"
              - key: "beans.xml"
                path: "beans.xml"
              - key: "http.json"
                path: "http.json"
              - key: "jetty.xml"
                path: "jetty.xml"
              - key: "log4j-viewer.xml"
                path: "log4j-viewer.xml"
              {{- if (((.Values.config).keystore).secretName) }}
              {{- else if .Values.config.enableSSL }}
              - key: "nsi-pce-keystore.jks"
                path: "key/nsi-pce-keystore.jks"
              {{- end }}
              {{- if or (((.Values.config).truststore).secretName) ((.Values.config).caSecretName) }}
              {{- else if .Values.config.enableSSL }}
              - key: "nsi-pce-truststore.jks"
                path: "trust/nsi-pce-truststore.jks"
              {{- end }}
        {{- if (((.Values.config).keystore).secretName) }}
        - name: keystore
          secret:
            secretName: {{ .Values.config.keystore.secretName }}
            items:
            - key: {{ .Values.config.keystore.key }}
              path: nsi-pce-keystore.jks
        {{- end }}
        {{- if (((.Values.config).truststore).secretName) }}
        - name: truststore
          secret:
            secretName: {{ .Values.config.truststore.secretName }}
            items:
            - key: {{ .Values.config.truststore.key }}
              path: nsi-pce-truststore.jks
        {{- end }}
        {{- if .Values.config.caSecretName }}
        - name: ca
          secret:
            secretName: {{ .Values.config.caSecretName }}
        - name: truststore
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
